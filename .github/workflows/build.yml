name: Build and test
on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  GITHUB_WORKSPACE: ${{ github.workspace }}
  GITHUB_TOKEN: ${{ secrets.BOILERPLATE_GITHUB_TOKEN }}  # Needed to get PR information, if any
  SONAR_TOKEN: ${{ secrets.BOILERPLATE_SONAR_TOKEN }}
  SONAR_DOTNET_ENABLE_CONCURRENT_EXECUTION: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet
        id: setup-dotnet
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: '8.x'

      - name: Install dotnet-sonarscanner
        id: install-sonarscanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Install dotnet-coverage
        id: install-dotnet-coverage
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Cache NuGet Packages
        id: cache-nuget-packages
        uses: actions/cache@v4
        with:
          key: nuget-${{ hashFiles('Directory.Packages.props') }}
          path: ~/.nuget/packages

      - name: Build the project, run all tests and publish to SonarCloud
        id: build
        run: |
          dotnet sonarscanner begin \
          /k:"mooronsi_moor-dotnet-api-boilerplate" \
          /o:"mooronsi" \
          /d:sonar.token="$SONAR_TOKEN" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build WebApiBoilerplate.sln --no-incremental          
          dotnet-coverage collect 'dotnet test WebApiBoilerplate.sln' -f xml  -o 'coverage.xml'
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - name: Send a notification to Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            Repository: ${{ github.repository }}
            
            Results:
            Checkout repo: ${{ steps.checkout.outcome != 'success' && '❌' || '✅' }} ${{ steps.checkout.outcome }}
            Setup dotnet: ${{ steps.setup-dotnet.outcome != 'success' && '❌' || '✅' }} ${{ steps.setup-dotnet.outcome }}
            Install dotnet-sonarscanner: ${{ steps.install-sonarscanner.outcome != 'success' && '❌' || '✅' }} ${{ steps.install-sonarscanner.outcome }}
            Install dotnet-coverage: ${{ steps.install-dotnet-coverage.outcome != 'success' && '❌' || '✅' }} ${{ steps.install-dotnet-coverage.outcome }}
            Cache NuGet Packages: ${{ steps.cache-nuget-packages.outcome != 'success' && '❌' || '✅' }} ${{ steps.cache-nuget-packages.outcome }}
            Build the project, run all tests and publish to SonarCloud: ${{ steps.build.outcome != 'success' && '❌' || '✅' }} ${{ steps.build.outcome }}